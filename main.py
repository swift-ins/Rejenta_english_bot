import os
import logging
from flask import Flask, request
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, ContextTypes, filters
from gtts import gTTS
from deep_translator import GoogleTranslator
from dotenv import load_dotenv
import asyncio

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–∫–µ–Ω–∞
load_dotenv()
TOKEN = os.getenv("TOKEN")  # –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è!

app = Flask(__name__)
application = Application.builder().token(TOKEN).build()

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å–ª–æ–≤–æ –∏–ª–∏ —Ñ—Ä–∞–∑—É, –∏ —è:\n"
        "- –û–ø—Ä–µ–¥–µ–ª—é —è–∑—ã–∫ üåç\n"
        "- –ü–µ—Ä–µ–≤–µ–¥—É –≤ –Ω—É–∂–Ω—É—é —Å—Ç–æ—Ä–æ–Ω—É üîÑ\n"
        "- –ü—Ä–æ–∏–∑–Ω–µ—Å—É –µ–≥–æ –≤—Å–ª—É—Ö üéôÔ∏è"
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞
async def translate_and_pronounce(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    text = update.message.text.strip()

    if not text:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å —Å–ª–æ–≤–æ –∏–ª–∏ —Ñ—Ä–∞–∑—É.")
        return

    try:
        is_russian = any('\u0400' <= char <= '\u04FF' for char in text)

        if is_russian:
            translation = GoogleTranslator(source='ru', target='en').translate(text)
            pronunciation_text = translation
        else:
            translation = GoogleTranslator(source='en', target='ru').translate(text)
            pronunciation_text = text

        tts = gTTS(text=pronunciation_text, lang="en")
        filename = "pronounce.mp3"
        tts.save(filename)

        await update.message.reply_text(
            f"üîπ *–ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç:* {text}\n"
            f"üî∏ *–ü–µ—Ä–µ–≤–æ–¥:* {translation}\n"
            f"üéôÔ∏è *–ü—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏–µ (–Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º):*",
            parse_mode="Markdown"
        )

        with open(filename, "rb") as audio:
            await update.message.reply_voice(voice=audio)

        os.remove(filename)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ: {e}")
        await update.message.reply_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ: {e}")

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
application.add_handler(CommandHandler("start", start))
application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, translate_and_pronounce))

import asyncio

@app.route(f'/{TOKEN}', methods=['POST'])
def webhook():
    if request.method == "POST":
        update = Update.de_json(request.get_json(force=True), application.bot)
        
        # –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π event loop –∏ –≤—ã–ø–æ–ª–Ω—è–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∫–æ–¥
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        loop.run_until_complete(application.update_queue.put(update))
        loop.close()
        
        return "ok"

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–µ–±—Ö—É–∫–∞
if __name__ == '__main__':
    WEBHOOK_URL = f"https://rejenta-english-bot.onrender.com/{TOKEN}"

    async def setup():
        await application.bot.set_webhook(WEBHOOK_URL)
        logger.info("–í–µ–±—Ö—É–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

    asyncio.run(setup())
    app.run(host='0.0.0.0', port=int(os.environ.get('PORT', 5000)))